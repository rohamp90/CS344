#!/bin/bash

    # NAME Tuan Tran
    # Program 1: Matrix

#########################################################################################################
    # DIMS function 
    #     matrix dims [MATRIX]
    #       Prints error message to stderr, nothing to stdout and return value != 0 if:
    #       Argument count is greater than 1 (e.g. `matrix dims m1 m2`).
    #       Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
    #       Otherwise, prints "ROWS COLS" (Space separated!) to stdout, nothing to stderr, and returns 0.
    function dims ()
    {
        # echo this is the dims                               #test print
        # echo number of parameters $varNumArguments          #test print number of parameters
        # echo name of file: $varFileName                     #test print

        varRows=0           #keep count of rows
        varCols=0           #keep count of colums

        #if there is more than 1 argument the print out error message to stderr
        # Argument count is greater than 1 (e.g. `matrix dims m1 m2`)
        if [ $varNumArguments -gt 2 ] || [ $varNumArguments -lt 1 ]
        then 
            echo "invalid number of arguments" >&2
            exit 1
        elif [ ! -r $varFileName ]
        then
            # Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
            echo $varFileName file not readable >&2
            exit 1
        else
            # Otherwise, prints "ROWS COLS" (Space separated!) to stdout, nothing to stderr, and returns 0.
            varRows="$(cat $varFileName | wc -l)"       #piping the contents of the file to word count and using the -l option
                                                        #to count the lines and assign to varRows
            varCols="$(head -1 $varFileName | wc -w)"             #take the first line and word count the number of items in the first line
                                                        #which should give you the amount of columns
            echo $varRows $varCols
            exit 0
        fi    
    }
#########################################################################################################

#########################################################################################################
# Transpose Function
# matrix transpose [MATRIX]
# Prints error message to stderr, nothing to stdout and return value != 0 if:
# Argument count is greater than 1 (e.g. `matrix transpose m1 m2`).
# Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix transpose no_such_file`).
# Otherwise, prints the transpose of the input, in a valid matrix format to stdout, nothing to stderr, and returns 0.
    function transpose() 
    {

        varRows="$(cat $varFileName | wc -l)"       #piping the contents of the file to word count and using the -l option
                                                        #to count the lines and assign to varRows
        varCols="$(head -1 $varFileName | wc -w)"             #take the first line and word count the number of items in the first line
                                                        #which should give you the amount of columns

        # echo number of parameters $varNumArguments          #test print number of parameters
        # echo name of file: $varFileName                     #test print

        #if there is more than 1 argument the print out error message to stderr
        # Argument count is greater than 1 (e.g. `matrix dims m1 m2`)
        if [ $varNumArguments -gt 2 ] || [ $varNumArguments -lt 1 ]
        then 
            echo "invalid number of arguments" >&2
            exit 1
        elif [ ! -r $varFileName ]
        then
            # Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
            echo $varFileName file not readable >&2
            exit 1
        else
        # Otherwise, prints the transpose of the input, in a valid matrix format to stdout, nothing to stderr, and returns 0.
            # echo NOW FOR THE TRANSPOSE                #test print
            
            varRows="$(cat $varFileName | wc -l)"       #piping the contents of the file to word count and using the -l option
                                                        #to count the lines and assign to varRows
            varCols="$(head -1 $varFileName | wc -w)"             #take the first line and word count the number of items in the first line
                                                        #which should give you the amount of columns
            for (( i=1; i<=$varCols; i++ ))             #For loop to transpose the matrix
            do   
                cut -f$i $varFileName | paste -s        #using cut followed by the field number (i is reprenting the field) then using paste to transpose
            done
            exit 0
        fi
    }
#########################################################################################################

#########################################################################################################
# Mean Function
# matrix mean [MATRIX]
# Prints error message to stderr, nothing to stdout and return value != 0 if:
# Argument count is greater than 1 (e.g. `matrix mean m1 m2`).
# Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix mean no_such_file`).
# Otherwise, prints a row vector mean of the input matrix, in a valid matrix format to stdout, nothing to stderr, 
# and returns 0. All values must round to the nearest integer, with ***.5 values rounded away from zero.

    function mean ()
    {
        #if there is more than 1 argument the print out error message to stderr
        # Argument count is greater than 1 (e.g. `matrix dims m1 m2`)
        if [ $varNumArguments -gt 2 ] || [ $varNumArguments -lt 1 ]
        then 
            echo "invalid number of arguments" >&2
            exit 1
        elif [ ! -r $varFileName ]
        then
            # Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
            echo $varFileName file not readable >&2
            exit 1
        else
        # Otherwise, prints a row vector mean of the input matrix, in a valid matrix format to stdout, nothing to stderr, 
        # and returns 0. All values must round to the nearest integer, with ***.5 values rounded away from zero.
            
            sum=0                                       #sum counter
            mean=0                                      #mean variable

##############################################
            #test add newline to file
            # tempMean="tempmeanfile"
            cat $varFileName | tr '\t' ' ' > tempmeanfile
            # echo >> tempmeanfile
            # cat -A tempmeanfile
            # tempVarRows="$(cat $tempMean | wc -l)"
            # rm tempmeanfile
####################################################

            varRows="$(cat tempmeanfile | wc -l)"   #testing using temp file
            varCols="$(head -n 1 tempmeanfile | wc -w)" 
            # varRows="$(cat $varFileName | wc -l)"       #piping the contents of the file to word count and using the -l option
                                                        #to count the lines and assign to varRows
            

            # varCols="$(head -n 1 $varFileName | wc -w)"             #take the first line and word count the number of items in the first line
                                                        #which should give you the amount of columns
            
            for (( i=1; i<=$varCols; i++ ))             #for loop that runs based on the amount of columns matrix has
            do
                # echo i: $i                              #test print
                # num=$(cat $varFileName | cut -f$i | paste -s)

                # cat tempmeanfile | cut -d ' ' -f$i > tempfile1
                # cut -d ' ' -f$i tempmeanfile | tr '\t' ' ' | tr '\n' ' '> tempfile1
                cut -d ' ' -f$i tempmeanfile | paste -s | tr '\t' ' ' > tempfile1

                # cut -f$i tempfile1 
                # cat tempfile1                               #test print

                for (( j=1; j<=$varRows; j++ ))
                do
                    # echo j: $j      #test print
                    num=$(cut -d ' ' -f$j tempfile1)
                    # echo num: $num              #test print
                    sum=$(( $sum + $num ))
                done
                # num=$(cat tempmeanfile | cut -d ' ' -f$i | paste -s)       #testing using temp file instead of varFilename

                # echo num: $num                        #test print
                # for element in $num
                # do
                #     sum=$(( sum + element ))
                # done
                mean=$(( (sum + (varRows /2)*( (sum>0)*2-1))/ varRows ))        #equation from homework instructions
               


                # printf "sum: %d\n" $sum                 #test print
                # printf "num of rows:%d\n" $varRows      #test print
                # printf "mean: %d\n\n" $mean              #test print
                # printf "%d " $mean
                
                echo $mean >> tempfile2
                sum=0
                mean=0

            done
                # printf "\n"
                # cat tempfile2 | tr 'n' ' ' |paste -s | tr '\t' ' ' > tempfile3
                cat tempfile2 | tr 'n' ' ' |paste -s  > tempfile3
                cat tempfile3
            rm tempmeanfile tempfile1 tempfile2 tempfile3
            exit 0
        fi
    }
#########################################################################################################

#########################################################################################################
# Adding Function
# Prints error message to stderr, nothing to stdout and return value != 0 if:
# Argument count does not equal 2 (e.g. `matrix add m1 m2 m3` or `matrix add m1`).
# Argument count is 2 but the file named by either argument is not readable (e.g. `matrix add m1 no_such_file`).
# The dimensions of the input matrices do not allow them to be added together following the rules of matrix addition.
# Otherwise, prints the sum of both matricies, in a valid matrix format to stdout, nothing to stderr, and returns 0.

    function add () 
    {
        #Argument count does not equal 2 (e.g. `matrix add m1 m2 m3` or `matrix add m1`).
    
        if [ $varNumArguments -ne 3 ]
        then 
            echo "invalid number of arguments" >&2
            exit 1
        elif [ ! -r $varFileName ] && [ ! -r $varSecondFileName ]
        then
            # Argument count is 2 but the file named by argument 2 is not readable (e.g. `matrix dims no_such_file`).
            echo files not readable >&2
            exit 1
        else 
        # The dimensions of the input matrices do not allow them to be added together following the rules of matrix addition.
        # Otherwise, prints the sum of both matricies, in a valid matrix format to stdout, nothing to stderr, and returns 0.


            file1Rows="$(cat $varFileName | wc -l)" 
            file2Rows="$(cat $varSecondFileName | wc -l)" 
            file1Cols="$(head -n 1 $varFileName | wc -w)"
            file2Cols="$(head -n 1 $varSecondFileName | wc -w)"

            if [ $file1Rows -ne $file2Rows ] || [ $file1Cols -ne $file2Cols ]           #check if matrix is same dimensions
            then
                echo matrix is not same dimensions>&2
                exit 1

            else
                sum=0                                               #set sum = 0
                num1=0
                num2=0
                matrixSize=$(( $file1Rows * $file1Cols ))           #calculate matrix size
 
                while read row1 <&3 && read row2 <&4;
                do

                    for (( i=1; i<=$file1Cols; i++ ))                 #adding to temp1file
                    do
                        echo $row1 | cut -d ' ' -f$i >> tempfile1
                        echo $row2 | cut -d ' ' -f$i >> tempfile2
                    done

                    
                done 3<"$varFileName" 4<"$varSecondFileName"

                cat tempfile1 | paste -s | tr '\t' ' ' > tempfile10
                cat tempfile2 | paste -s | tr '\t' ' ' > tempfile20


                cat tempfile10 >> tempfile30
                cat tempfile20 >> tempfile30
                

                tempCols="$(head -n 1 tempfile30 | wc -w)" 

                endofline=0                                 #variable used to keep track of when to insert a newline
                for (( i=1; i<=$tempCols; i++ ))             #for loop that runs based on the amount of columns matrix has
                do
                    num1="$(cut -d ' ' -f$i tempfile10)"    #assign number so that i can add sum together
                    num2="$(cut -d ' ' -f$i tempfile20)"
                    sum=$(($num1 + $num2))

                    ((endofline++))

                    echo $sum | tr "\n" "\t" >> tempfile3

                       if [[ "$endofline" -eq "$file1Cols" ]]   #conditonal to either insert a tab or newline
                        then
                            printf "%d\n" $sum
                            endofline=0
                        else
                            printf "%s\t" $sum
                        fi
                    
                    sum=0

                done

                rm tempfile1 tempfile2 tempfile3 tempfile10 tempfile20 tempfile30                     #remove temp files

                exit 0
            fi
        fi
    }
#########################################################################################################

#########################################################################################################
# Multiply Function
# matrix multiply MATRIX_LEFT MATRIX_RIGHT
# Prints error message to stderr, nothing to stdout and return value != 0 if:
# Argument count does not equal 2 (e.g. `matrix multiply m1 m2 m3` or `matrix multiply m1`).
# Argument count is 2 but the file named by either argument is not readable (e.g. `matrix multiply m1 no_such_file`).
# The dimensions of the input matrices do not allow them to be multiplied together following the rules of matrix multiplication.
# Otherwise, prints the product of both matricies, with the first argument as the left matrix and the second argumentas the right matrix, 
# in a valid matrix format to stdout, nothing to stderr, and returns 0. (`matrix multiply A B` should return A*B, not B*A)

function multiply() 
{
        #Argument count does not equal 2 (e.g. `matrix add m1 m2 m3` or `matrix add m1`).
    
        if [ $varNumArguments -ne 3 ]
        then 
            echo "invalid number of arguments" >&2
            exit 1
        elif [ ! -r $varFileName ] && [ ! -r $varSecondFileName ]
        then
            # Argument count is 2 but the file named by argument 2 is not readable (e.g. `matrix dims no_such_file`).
            echo files not readable >&2
            exit 1
        else 
            # Otherwise, prints the product of both matricies, with the first argument as the left matrix and the second argumentas the right matrix, 
            # in a valid matrix format to stdout, nothing to stderr, and returns 0. (`matrix multiply A B` should return A*B, not B*A)
            # echo everything is working                        #test print
            # echo $varFileName                                 #test print
            # echo $varSecondFileName                           #test print
            # echo number of arguments: $varNumArguments        #test print

            file1Rows="$(cat $varFileName | wc -l)" 
            file2Rows="$(cat $varSecondFileName | wc -l)" 
            file1Cols="$(head -n 1 $varFileName | wc -w)"
            file2Cols="$(head -n 1 $varSecondFileName | wc -w)"

            # echo file1Rows: $file1Rows
            # echo file2Rows: $file2Rows
            # echo file1Cols: $file1Cols
            # echo file2Cols: $file2Cols

            if [ $file1Rows -ne $file2Cols ] || [ $file1Cols -ne $file2Rows ]           #check if matrix is same dimensions
            then
                echo matrix is not able to be multiplied>&2
                exit 1

            else
            
                file1Rows="$(cat $varFileName | wc -l)" 
                file2Rows="$(cat $varSecondFileName | wc -l)" 
                file1Cols="$(head -n 1 $varFileName | wc -w)"
                file2Cols="$(head -n 1 $varSecondFileName | wc -w)"
                endofline=1                                 #variable used to keep track of when to insert a newline
                # while read row1 <&3 && read row2 <&4;
                # do

                #     # for (( i=1; i<=$file1Cols; i++ ))                 #adding to temp1file
                #     # do
                #         echo $row1 | paste -s | tr '\n' '\t' | tr '\t' ' '>> tempfile1
                #         echo $row2 | paste -s | tr '\n' '\t' | tr '\t' ' '>> tempfile2
                #     # done

                    
                # done 3<"$varFileName" 4<"$varSecondFileName"

                while read row1 <&3
                do
                    echo $row1 | paste -s | tr '\n' '\t' | tr '\t' ' '>> tempfile1
                done 3<"$varFileName"

                while read row2 <&4
                do
                    echo $row2 | paste -s | tr '\n' '\t' | tr '\t' ' '>> tempfile2
                done 4<"$varSecondFileName"

                # for (( i=1; i<=$file2Cols; i++ ))
                # do
                #     cut -f$i $varSecondFileName | paste -s | tr '\n' '\t' | tr '\t' ' ' >> tempfile2
                # done

       

                # cat tempfile1           #test print
                # cat tempfile2           #test print

                cat tempfile1 | paste -s | tr '\t' ' ' > tempfile10             #not sure if needed same as tempfile1
                cat tempfile2 | paste -s | tr '\t' ' ' > tempfile20



                cat tempfile10 >> tempfile30
                cat tempfile20 >> tempfile30

                # cat tempfile10          #test print
                # cat tempfile30      #test print

                sum=0
                num1=0
                num2=0

                # echo file2rows: $file2Rows        #test print
                # cat tempfile1                   #test print
                # echo
                # cat tempfile2                   #test print
                # echo                            #test echo

                tempk=1
                tempj=1
                matrixCounter=$(($file1Rows * $file2Rows))
                # echo matrixCounter: $matrixCounter            #test print
                # for (( i=1; i<=$file1Rows; i++ ))   #going across first row then downward
                # do
                #     for (( k=1; k<=$file1Cols; k++ ))
                #     do
                #         for (( j=1; j<=$file2Rows; j++ ))
                #         do
                #             # for (( p=1; p<=$file2Cols; p++))
                #             # do
                #                 # echo i: $i            #test print
                #                 # echo j: $j            #test print
                #                 # echo k: $k            #test print
                #                 # echo tempk: $tempk        #test print
                #                 # echo tempj: $tempj        #test print
                #                 # echo p: $p            #test print
                #                 # tempk="$(($j * $i + $j))"
                                
                #                 num1="$(cut -d ' ' -f$tempj tempfile1)"
                #                 num2="$(cut -d ' ' -f$tempk tempfile2)"
                #                 sum="$(( $num1 * $num2 + $sum))"
                                
                #                 # echo num1: $num1      #test print
                #                 # echo num2: $num2      #test print
                #                 # echo sum: $sum        #test print
                #                 # echo                  #test print
                #                 # ((j++))
                #                 # ((k++))
                #                 ((tempk++))
                #                 ((tempj++))
                #             # done
                #         done
                #         # echo endofline: $endofline
                #         # echo file1Cols: $file1Cols
                #         if [[ "$endofline" -eq "$file2Cols" ]]   #conditonal to either insert a tab or newline
                #         then
                #             printf "%d\n" $sum
                #             endofline=0
                #         else
                #             printf "%s\t" $sum
                #         fi
                #         ((endofline++))
                #         sum=0
                #         if [ $tempk -ge $matrixCounter ]
                #         then
                #             tempk=1
                #             tempj=$(($file1Cols + 1))
                #             # echo reassigning tempj!!!!        #test print
                #             # echo tempj: $tempj
                #             # echo
                        
                #         elif [ $tempj -ge $matrixCounter ]
                #         then
                #             tempj=$(($file1Cols + 1))
                #             # echo reassigning tempj in a different way!!!!       #test print
                #             # echo tempj: $tempj
                #         else
                #             tempj=1
                #         fi
                #     done
                #     ((i++))
                    
                # done

                declare -A matrix1
                declare -A matrix2
                declare -A matrix3

                counter=1
                for (( i=1; i<=$file1Rows; i++ ))
                do
                    for (( j=1; j<=$file1Cols; j++ ))
                    do
                        matrix1[$i,$j]="$(cut -d ' ' -f$counter tempfile1)"
                        # echo matrix1[$i,$j] = ${matrix1[$i,$j]}
                        ((counter++))
                    done
                done
                # echo 
                counter=1
                for (( i=1; i<=$file2Rows; i++ ))
                do
                    for (( j=1; j<=$file2Cols; j++ ))
                    do
                        matrix2[$i,$j]="$(cut -d ' ' -f$counter tempfile2)"
                        # echo matrix2[$i,$j] = ${matrix2[$i,$j]}
                        ((counter++))
                    done
                done

                sum=0
                count=1
                for (( i=1; i<=$file1Rows; i++))
                do
                    for (( j=1; j<=$file2Cols; j++ ))
                    do
                        # for (( p=1; p<=$file2Cols; p++ ))
                        # do
                            for (( k=1; k<=$file2Rows; k++ ))
                            do
                                # echo i: $i            #   test print
                                # echo j: $j            #test print
                                # # echo p: $p
                                # echo k: $k            #test print
                                
                                # num1="$(cut -d ' ' -f$j tempfile1)"
                                # num2="$(cut -d ' ' -f$k tempfile2)"
                                # sum="$(( $num1 * $num2 + $sum))"
                                # echo num1: $num1      #test print
                                # echo num2: $num2      #test print
                                # echo sum: $sum        #test print
                                # echo                  #test print
                                # echo matrix1[$i,$k] = ${matrix1[$i,$j]}
                                # echo matrix2[$k,$j] = ${matrix2[$k,$j]}
                                # echo "${matrix1[$i,$k]} * ${matrix2[$k,$j]}"
                                sum="$((${matrix1[$i,$k]} * ${matrix2[$k,$j]} + $sum))"
                                # echo sum: $sum
                                # echo count: $count
                            done 
                            matrix3[$i,$j]=$sum
                            # echo matrix3[$i,$j] = ${matrix3[$i,$j]}

                            if [[ "$count" -eq "$file2Cols" ]]   #conditonal to either insert a tab or newline
                                then
                                    printf "%d\n" $sum
                                    count=0
                                else
                                    printf "%s\t" $sum
                                fi
                                ((count++))
                            sum=0
                        # done
                    done
                done


                #testing
                # for (( k=1; k<=$file2Rows; k++ ))
                # do
                #     for (( j=1; j<=$file1Cols; j++ ))
                #     do
                #         for (( p=1; p<=$file2Cols; p++ ))
                #         do
                #             for (( i=1; i<=$file1Rows; i++))
                #             do
                #                 echo i: $i            #   test print
                #                 echo j: $j            #test print
                #                 echo p: $p
                #                 echo k: $k            #test print
                                
                #                 # num1="$(cut -d ' ' -f$j tempfile1)"
                #                 # num2="$(cut -d ' ' -f$k tempfile2)"
                #                 # sum="$(( $num1 * $num2 + $sum))"
                #                 # echo num1: $num1      #test print
                #                 # echo num2: $num2      #test print
                #                 # echo sum: $sum        #test print
                #                 # echo                  #test print
                #                 echo matrix1[$i,$j] = ${matrix1[$i,$j]}
                #                 echo matrix2[$i,$k] = ${matrix2[$i,$k]}
                #                 echo "${matrix1[$i,$j]} * ${matrix2[$k,$p]}"
                #                 matrix3[$i,$j]="$((${matrix1[$i,$j]} * ${matrix2[$k,$p]}))"
                #                 echo matrix3[$i,$j] = ${matrix3[$i,$j]}
                #             done 
                #         done
                #     done
                # done



                rm tempfile1 tempfile2 tempfile10 tempfile20 tempfile30                     #remove temp files

                exit 0


            fi
        fi
}

#########################################################################################################


#########################################################################################################
# Variables
    varNumArguments=$#          #variable to save the number of arguments
    varFileName=$2 
    varSecondFileName=$3
#########################################################################################################

#########################################################################################################
# Main Logic
    # echo varRemainingArguments = $1 "${@:2}"        #test print
    # echo varNumArguments = $varNumArguments         #test print
    if [ "$1" == "dims" ]           #If the first argument is dims then this logic will run
    then
        #Nested IF Statement
        #if no argument is given but input is piped in
        if [ -p /dev/stdin ]        #condition is true if stdin exists and is named pipe
        then 

            # send any piped input to a temp file
            cat /dev/stdin > tempPipedInputFile   #send piped input into a file called tempPipedInputFile
            # cat tempPipedInputFile          #test print

            echo $(cat tempPipedInputFile | wc -l) $(head -1 tempPipedInputFile | wc -w)    #count the rows and columns in tempPipedInputFile
            rm tempPipedInputFile           #making sure to remove the tempPipedInputFile
            exit 0
        else
            dims        #If a file is given to dims then this will run see dims function above
        fi
        
    elif [ "$1" == "transpose" ]        #If transpose is the first argument
    then 
        transpose
    elif [ "$1" == "mean" ]        #If mean is the first argument
    then 
        mean
    elif [ "$1" == "add" ] 
    then
        add

    elif [ "$1" == "multiply" ]
    then
        multiply

    else 
        echo error bad command >&2
        exit 1
    fi

    exit 0

##############################################################################################
# if [ "$1" == "dims" ]
#     then
#         echo this is the dims               #test print
#         echo number of parameters $#        #test print number of parameters

#         #if there is more than 1 argument the print out error message to stderr
#         # Argument count is greater than 1 (e.g. `matrix dims m1 m2`)
#         if [ $# -gt 2 ] 
#         then 
#             echo "invalid number of arguments" >&2
#         fi    

        

#     elif [ "$1" == "transpose" ]
#     then 
#         echo this is transpose
#     fi

